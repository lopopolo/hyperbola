#!/bin/bash

set -e
set -x

HYPERBOLA_TOOLS_BIN="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

USAGE="$0 -e environment -r refname

This script clones a copy of the hyperbola git repository,
checks out the supplied refname, builds an artifact, and
promotes it to be the  version of the site.

environment may be one of:
  - production
  - staging
"

ENV=""
REFNAME=""

DEPLOY_AS_USER="www-data"
DEPLOY_AS_GROUP="www-data"

while getopts "h?e:r:" opt; do
    case "$opt" in
    h|\?)
        echo "$USAGE"
        exit 0
        ;;
    e)  ENV="$OPTARG"
        ;;
    r)  REFNAME="$OPTARG"
        ;;
    *)  echo "$USAGE"
        exit 1
        ;;
    esac
done

if [ -z "$REFNAME" ]; then
    echo "$USAGE"
    exit 1
fi

if [ "$ENV" == "production" ]; then
    DEPLOY_ROOT="/hyperbola/production/artifacts"
    SERVICE="hyperbola-app@production.service"
elif [ "$ENV" == "staging" ]; then
    DEPLOY_ROOT="/hyperbola/staging/artifacts"
    SERVICE="hyperbola-app@staging.service"
else
    echo "$USAGE"
    exit 1
fi

function python_version
{
    "$PYTHON" -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'
}

function python_site_packages_dir
{
    "$ARTIFACT_ROOT/virtualenv/bin/python" -c "import distutils; print(distutils.sysconfig.get_python_lib())"
}

PYTHON=${PYTHON:-$(which python3)}
PYTHON_VERSION=$(python_version)

DEPLOY_TIME=$(date --rfc-3339=seconds | sed 's/ /T/' | sed 's/:/-/g')

ARTIFACT_NAME="hyperbola-${REFNAME:0:30}-py$PYTHON_VERSION-$DEPLOY_TIME"
ARTIFACT_ROOT="$DEPLOY_ROOT/$ARTIFACT_NAME"

cd "$DEPLOY_ROOT"

# clone

git clone https://github.com/lopopolo/hyperbola.git "$ARTIFACT_NAME"

ln -snfv "$ARTIFACT_ROOT" "$DEPLOY_ROOT/next"

cd "$DEPLOY_ROOT/next"

git checkout "$REFNAME"

git clean -f -d -x

# build virtualenv

virtualenv --python="$PYTHON" "$ARTIFACT_ROOT/virtualenv"

"$ARTIFACT_ROOT/virtualenv/bin/pip" install -U virtualenv pip wheel setuptools
"$ARTIFACT_ROOT/virtualenv/bin/pip" install -r requirements.txt --cache-dir /hyperbola/var/pip/cache

"$ARTIFACT_ROOT/virtualenv/bin/pip" freeze > "$ARTIFACT_ROOT/virtualenv/installed-packages.txt"

# add hyperbola to virtualenv search path
echo "$ARTIFACT_ROOT/app" > "$(python_site_packages_dir)/hyperbola.pth"

# populate .env
cp "$DEPLOY_ROOT"/current/env/*.env "$ARTIFACT_ROOT/env/"
rm "$ARTIFACT_ROOT/env/00-path.env"
# Add virtualenv to $PATH
echo "export PATH=$ARTIFACT_ROOT/virtualenv/bin:$ARTIFACT_ROOT/bin:"'$PATH' > "$ARTIFACT_ROOT/env/00-path.env"

# compile

"$ARTIFACT_ROOT/virtualenv/bin/python" -m compileall app

# build static assets

set +x # don't dump secrets to screen
for env in "$ARTIFACT_ROOT"/env/*.env; do
    . "$env"
done
set -x

# setup node+yuglify
node --version
npm --version
npm install --production
export PATH="$(npm bin):$PATH"

"$ARTIFACT_ROOT/virtualenv/bin/python" app/manage.py collectstatic --noinput

ln -snfv "/hyperbola/media" "$ARTIFACT_ROOT/media/$ENV"

# promote

sudo chown -R "$DEPLOY_AS_USER:$DEPLOY_AS_GROUP" "$ARTIFACT_ROOT"

# everything read-only by default
sudo chmod -R a=rX "$ARTIFACT_ROOT"

CURRENT_ROOT=$(readlink -f "$DEPLOY_ROOT/current")

ln -snfv "$CURRENT_ROOT" "$DEPLOY_ROOT/previous"

ln -snfv "$ARTIFACT_ROOT" "$DEPLOY_ROOT/current"

systemctl restart "$SERVICE"
systemctl reload nginx.service

"$HYPERBOLA_TOOLS_BIN/clean-old-deployments" -d "$DEPLOY_ROOT"
