#!/usr/bin/env python3
import argparse
from collections import namedtuple
import sys
import time

import boto3


Describe = namedtuple("Describe", ["min_size", "max_size", "desired_capacity", "instances"])


class CycleServers:
    def __init__(self, *, client, asg, step_size):
        self.client = client
        self.asg = asg
        self.step_size = step_size

    def run(self):
        describe = self.describe()
        actual_size = len(
            [
                instance
                for instance in describe.instances
                if instance["LifecycleState"] == "InService"
            ]
        )

        print(f"Cycling {self.asg} with current size {actual_size}")
        for count in range(actual_size):
            print(f"Cycling {describe.instances[count]['InstanceId']}")
            self.cycle(actual_size)

    def cycle(self, actual_size):
        scale_up_size = actual_size + self.step_size
        print(f"Increasing desired size to {scale_up_size}")
        self.set_desired_capacity(scale_up_size)
        while True:
            print("Waiting for ASG to scale up ...")
            time.sleep(10)
            describe = self.describe()
            bootrapped = [
                instance
                for instance in describe.instances
                if instance["LifecycleState"] == "InService"
            ]
            print(f"There are {len(bootrapped)} bootstrapped instances")
            if len(bootrapped) == scale_up_size:
                self.set_desired_capacity(actual_size)
                break

    def describe(self):
        describe = self.client.describe_auto_scaling_groups(
            AutoScalingGroupNames=[self.asg], MaxRecords=1
        )
        asg = describe["AutoScalingGroups"][0]
        return Describe(
            min_size=asg["MinSize"],
            max_size=asg["MaxSize"],
            desired_capacity=asg["DesiredCapacity"],
            instances=asg["Instances"],
        )

    def set_desired_capacity(self, desired):
        self.client.set_desired_capacity(
            AutoScalingGroupName=self.asg, DesiredCapacity=desired, HonorCooldown=False
        )


def parse_args(args):
    parser = argparse.ArgumentParser(description="Purge unused AMIs")

    parser.add_argument("--asg-name", dest="asg_name", required=True, help="ASG to cycle")

    parser.add_argument(
        "--step-size", dest="step_size", type=int, default=1, help="Simulataneous nodes to cycle"
    )

    return parser.parse_args(args)


def main(args):
    parsed_args = parse_args(args)
    if not parsed_args:
        return 1

    autoscaling = boto3.client("autoscaling")
    cycler = CycleServers(
        client=autoscaling, asg=parsed_args.asg_name, step_size=parsed_args.step_size
    )
    cycler.run()

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
