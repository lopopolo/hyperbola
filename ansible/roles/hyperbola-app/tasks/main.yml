---
- name: Include hyperbola app environment
  include_vars:
    file: "{{ hyperbola_environment }}.yml"
    name: app_hyperbola_env
  no_log: True

# deploy user
- name: Create app group
  group:
    name: hyperbola-app
    state: present
- name: Create app user
  user:
    name: hyperbola-app
    state: present
    group: hyperbola-app
    shell: /bin/bash

# install system package dependencies
# https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
- name: Add deadsnakes ppa
  apt_repository: repo='ppa:deadsnakes/ppa'
- name: Install python
  apt:
    state: latest
    name:
      - "{{ app_python }}"
      - "{{ app_python }}-dev"
      - "{{ app_python }}-venv"
  tags:
    - skip_ansible_lint
- name: Add node ecosystem signing keys
  apt_key:
    url: "{{ item }}"
    state: present
  with_items:
    - "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
    - "https://dl.yarnpkg.com/debian/pubkey.gpg"
- name: Add node ecosystem repositories
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - deb https://deb.nodesource.com/{{ app_node }} {{ ansible_distribution_release }} main
    - deb-src https://deb.nodesource.com/{{ app_node }} {{ ansible_distribution_release }} main
    - deb https://dl.yarnpkg.com/debian/ stable main
- name: Install hyperbola build deps
  apt:
    state: present
    name:
      - build-essential
      - libssl-dev
      - libffi-dev
      - rsync
      - libmysqlclient-dev
      - nodejs
      - yarn

# install python app
- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - /hyperbola/app
- name: Initialize the deploy root and gather facts
  deploy_helper:
    path: /hyperbola/app
- name: Create new release path
  file:
    path: "{{ deploy_helper.new_release_path }}"
    state: directory
- name: Add an unfinished file, to allow cleanup on successful finalize
  file:
    path: "{{ deploy_helper.new_release_path }}/{{ deploy_helper.unfinished_filename }}"
    state: touch
- name: Set artifact source root
  set_fact:
    app_source_root: "/hyperbola/sdist"
- name: Create app virtualenv
  command: "{{ app_python }} -m venv {{ deploy_helper.new_release_path }}/venv"
  args:
    creates: "{{ deploy_helper.new_release_path }}/venv/bin/python"
- name: Install pipenv
  pip:
    state: latest
    executable: pip3
    name:
      - pipenv
  tags:
    - skip_ansible_lint
- name: Update pip infra
  pip:
    state: latest
    executable: "{{ deploy_helper.new_release_path }}/venv/bin/pip"
    name:
      - setuptools
  tags:
    - skip_ansible_lint
- name: Install app dependencies
  command: pipenv install --deploy
  args:
    chdir: "{{ app_source_root }}"
    creates: "{{ deploy_helper.new_release_path }}/venv/**/*django*"
  environment:
    VIRTUAL_ENV: "{{ deploy_helper.new_release_path }}/venv"
- name: Install app
  command: "{{ deploy_helper.new_release_path }}/venv/bin/python setup.py install"
  args:
    chdir: "{{ app_source_root }}"
    creates: "{{ deploy_helper.new_release_path }}/venv/**/*hyperbola*"
  environment:
    PBR_VERSION: "{{ app_version }}"
    SKIP_GIT_SDIST: 1
    SKIP_GENERATE_AUTHORS: 1
    SKIP_WRITE_GIT_CHANGELOG: 1
- name: Install asset pipeline dependencies
  command: yarn install
  args:
    chdir: "{{ app_source_root }}"
    creates: "{{ app_source_root }}/node_modules/.bin/webpack"
- name: Build static assets
  command: yarn run build
  args:
    chdir: "{{ app_source_root }}"
    creates: "{{ app_source_root }}/dist/favicon.ico"
- name: Add humans.txt and robots.txt
  copy:
    src: "{{ item }}"
    dest: "{{ app_source_root }}/dist/{{ item }}"
  with_items:
    - humans.txt
    - robots.txt
- name: copy source artifacts to deploy root
  synchronize:
    src: "{{ item }}"
    dest: "{{ deploy_helper.new_release_path }}"
  with_items:
    - "{{ app_source_root }}/manage.py"
  delegate_to: "{{ inventory_hostname }}"
- name: Install 12factor environment
  template:
    src: "dotenv.j2"
    dest: "{{ deploy_helper.new_release_path }}/.env"
    mode: 0444
- name: manage.py collectstatic
  command: "{{ deploy_helper.new_release_path }}/venv/bin/python {{ deploy_helper.new_release_path }}/manage.py collectstatic --no-input"
  args:
    creates: "{{ deploy_helper.new_release_path }}/assets/staticfiles.json"
- name: Install gunicorn config
  template:
    src: "gunicorn.py.j2"
    dest: "{{ deploy_helper.new_release_path }}/gunicorn.py"
    mode: a=r
- name: Set owner of deployment to hyperbola-app:hyperbola-app
  file:
    dest: "{{ deploy_helper.new_release_path }}"
    owner: hyperbola-app
    group: hyperbola-app
    mode: a=rX
    recurse: true
- name: Finalize the deploy, removing the unfinished file and switching the symlink
  deploy_helper:
    path: /hyperbola/app
    release: "{{ deploy_helper.new_release }}"
    state: finalize
  notify: restart app

# services
- name: Install systemd units
  copy:
    src: "{{ item }}"
    dest: /etc/systemd/system
    mode: 0444
  with_items:
    - hyperbola-app@.service
    - hyperbola-app-backup@.service
    - hyperbola-app-backup@.timer
  notify: reload systemd units
- name: Enable app instantiated units
  systemd:
    name: "{{ item.unit }}"
    state: "{{ item.state }}"
    enabled: "{{ item.enabled }}"
    daemon_reload: true
  with_items:
    - unit: "hyperbola-app@{{ hyperbola_environment }}.service"
      enabled: true
      state: "{% if hyperbola_environment == 'production' %}stopped{% else %}started{% endif %}"
    - unit: "hyperbola-app-backup@{{ hyperbola_environment }}.service"
      enabled: false
      state: stopped
    - unit: "hyperbola-app-backup@{{ hyperbola_environment }}.timer"
      enabled: true
      state: stopped
